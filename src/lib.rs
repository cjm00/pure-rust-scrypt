#![allow(dead_code)]

extern crate sha2;
extern crate hmac;
extern crate pbkdf2;

use hmac::Hmac;
use sha2::Sha256;
use pbkdf2::pbkdf2;

use std::ops::{Index, IndexMut, BitXorAssign};

#[inline(always)]
#[allow(non_snake_case)]
fn R(i: u32, r: u32) -> u32 {
    i.rotate_left(r)
}

fn integerify(input: &[u8], n: u64) -> u64 {
    assert!(input.len() >= 64);
    let mut output = [0u8; 8];
    output[..].copy_from_slice(&input[input.len() - 64.. input.len() - 56]);

    unsafe {
        u64::from_le(
            ::std::mem::transmute(output)
        ) & (n-1)
    }
    
}

fn xor_to_slice(lhs: &[u8], rhs: &[u8], target: &mut [u8]) {
    assert_eq!(lhs.len(), rhs.len());
    assert_eq!(lhs.len(), target.len());

    for ((l, r), t) in lhs.iter().cloned().zip(rhs.iter().cloned()).zip(target.iter_mut()) {
        *t = l ^ r;
    }
}

fn xor_slice(lhs: &mut [u8], rhs: &[u8]) {
    assert_eq!(lhs.len(), rhs.len());

    for (l, r) in lhs.iter_mut().zip(rhs.iter().cloned()) {
        *l ^= r;
    }
}
fn salsa_20_8_core(input: SalsaBlock) -> SalsaBlock {
    let mut x = input.clone();

    for _ in 0..4 {
        x[4]  ^= R( x[0].wrapping_add(x[12]), 7);
        x[8]  ^= R( x[4].wrapping_add(x[0] ), 9);
        x[12] ^= R( x[8].wrapping_add(x[4] ), 13);
        x[0]  ^= R(x[12].wrapping_add(x[8] ), 18);
        x[9]  ^= R( x[5].wrapping_add(x[1] ), 7);
        x[13] ^= R( x[9].wrapping_add(x[5] ), 9);
        x[1]  ^= R(x[13].wrapping_add(x[9] ), 13);
        x[5]  ^= R (x[1].wrapping_add(x[13]), 18);
        x[14] ^= R(x[10].wrapping_add(x[6] ), 7);
        x[2]  ^= R(x[14].wrapping_add(x[10]), 9);
        x[6]  ^= R (x[2].wrapping_add(x[14]), 13);
        x[10] ^= R (x[6].wrapping_add(x[2] ), 18);
        x[3]  ^= R(x[15].wrapping_add(x[11]), 7);
        x[7]  ^= R( x[3].wrapping_add(x[15]), 9);
        x[11] ^= R( x[7].wrapping_add(x[3] ), 13);
        x[15] ^= R(x[11].wrapping_add(x[7] ), 18);
        x[1]  ^= R( x[0].wrapping_add(x[3] ), 7);
        x[2]  ^= R( x[1].wrapping_add(x[0] ), 9);
        x[3]  ^= R( x[2].wrapping_add(x[1] ), 13);
        x[0]  ^= R( x[3].wrapping_add(x[2] ), 18);
        x[6]  ^= R( x[5].wrapping_add(x[4] ), 7);
        x[7]  ^= R( x[6].wrapping_add(x[5] ), 9);
        x[4]  ^= R( x[7].wrapping_add(x[6] ), 13);
        x[5]  ^= R( x[4].wrapping_add(x[7] ), 18);
        x[11] ^= R(x[10].wrapping_add(x[9] ), 7);
        x[8]  ^= R(x[11].wrapping_add(x[10]), 9);
        x[9]  ^= R( x[8].wrapping_add(x[11]), 13);
        x[10] ^= R( x[9].wrapping_add(x[8] ), 18);
        x[12] ^= R(x[15].wrapping_add(x[14]), 7);
        x[13] ^= R(x[12].wrapping_add(x[15]), 9);
        x[14] ^= R(x[13].wrapping_add(x[12]), 13);
        x[15] ^= R(x[14].wrapping_add(x[13]), 18);
    }

    for (x, i) in x.iter_mut().zip(input.iter().cloned()) {
        *x = x.wrapping_add(i);
    }

    x
}

#[derive(Clone, PartialEq, Eq, Debug)]
pub struct SalsaBlock([u32; 16]);

impl SalsaBlock {
    pub fn as_bytes(&self) -> &[u8; 64] {
        unsafe { &*(&self.0 as *const [u32; 16] as *const [u8; 64]) }
    }

    pub fn as_bytes_mut(&mut self) -> &mut [u8; 64] {
        unsafe {&mut *(&mut self.0 as *mut [u32; 16] as *mut [u8; 64])}
    }

    fn xor_byte_slice(&mut self, sl: &[u8]) {
        assert_eq!(sl.len(), 64);

        for (l, r) in self.as_bytes_mut().iter_mut().zip(sl.iter().cloned()) {
            *l ^= r;
        }
    }

    pub fn salsa(self) -> Self {
        salsa_20_8_core(self)
    }

    pub fn iter(&self) -> ::std::slice::Iter<u32> {
        self.0.iter()
    }

    pub fn iter_mut(&mut self) -> ::std::slice::IterMut<u32> {
        self.0.iter_mut()
    }

    pub fn from_bytes(src: [u8; 64]) -> Self {
        SalsaBlock(
            unsafe{::std::mem::transmute(src)}
        )
    }

    pub fn from_words(src: [u32; 16]) -> Self {
        SalsaBlock(src)
    }
}

impl Index<usize> for SalsaBlock {
    type Output = u32;
    #[inline]
    fn index(&self, index: usize) -> &Self::Output {
        &self.0[index]
    }
}

impl IndexMut<usize> for SalsaBlock {
    #[inline]
    fn index_mut(&mut self, index: usize) -> &mut u32 {
        &mut self.0[index]
    }
}

impl BitXorAssign for SalsaBlock {
    fn bitxor_assign(&mut self, rhs: Self) {
        for t in 0..16 {
            self[t] ^= rhs[t]
        }
    }
}

struct ScryptBlockMixer<'a> {
    state: SalsaBlock,
    source: &'a [u8],
}

impl<'a> ScryptBlockMixer<'a> {
    fn from_slice<'c>(src: &'c [u8]) -> ScryptBlockMixer<'c> {
        assert!(src.len() > 0, "Input length must be non-zero");
        assert_eq!(src.len() % 64, 0, "Input length must be a multiple of 64");

        let mut state = [0u8; 64];
        state.copy_from_slice(src.chunks(64).last().unwrap());

        let state = SalsaBlock::from_bytes(state);
        ScryptBlockMixer{state, source: src}
    }
}

impl<'a> Iterator for ScryptBlockMixer<'a> {
    type Item = SalsaBlock;
    fn next(&mut self) -> Option<Self::Item> {
        if self.source.is_empty() {return None}

        let (next, source) = self.source.split_at(64);
        self.source = source;

        self.state.xor_byte_slice(next);
        self.state = self.state.clone().salsa();

        Some(self.state.clone())
    }
}
fn scrypt_block_mix(input: &[u8]) -> Vec<u8> {
    let mut output = vec![0; input.len()];
    let s = ScryptBlockMixer::from_slice(input);

    for (o, b) in output.chunks_mut(64).zip(s) {
        o.copy_from_slice(b.as_bytes());
    }
    output
}

fn scrypt_romix(input: &[u8], p: usize) -> Vec<u8> {
    assert!(p > 0);
    assert!(p.is_power_of_two());

    assert!(input.len() > 0);
    assert!(input.len() % 128 == 0);

    let mut x = input.to_owned();

    let mut v: Vec<u8> = vec![0; input.len() * p];
    let mut t: Vec<u8> = vec![0; x.len()];
    let n = p as u64;

    for c in v.chunks_mut(x.len()) {
        c.copy_from_slice(&x);
        x = scrypt_block_mix(&x);
    }

    for _ in 0..p {
        let j = integerify(&x, n);
        let low =  (j * x.len() as u64) as usize;
        let high = ((j+1) * x.len() as u64) as usize;
        xor_to_slice(&mut x, &v[low..high], &mut t);
        x = scrypt_block_mix(&t);
    }

    x
}

pub fn scrypt<P, S>(pass: P, salt: S, n: usize, r: usize, p: usize, output_len: usize, ) -> Vec<u8> 
    where P: AsRef<[u8]>, S: AsRef<[u8]> {
        let mut b = vec![0u8; 128 * p * r];
        pbkdf2::<Hmac<Sha256>>(pass.as_ref(), salt.as_ref(), 1, &mut b);

        for chunk in b.chunks_mut(128 * r) {
            let c_owned = chunk.to_owned();
            chunk.copy_from_slice(&scrypt_romix(&c_owned, n));
        }

        let mut output = vec![0; output_len];
        pbkdf2::<Hmac<Sha256>>(pass.as_ref(), &b, 1, &mut output);
        output
}

#[cfg(test)]
mod tests {
    static SALSA_20_INPUT_TEST_VECTOR: [u8; 64] = [
        0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86,
        0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
        0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5,
        0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
        0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85,
        0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
        0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
        0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e,
    ];

    static SALSA_20_OUTPUT_TEST_VECTOR: [u8; 64] = [
        0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99,
        0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
        0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d,
        0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
        0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc,
        0xfe, 0x6b, 0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba,
        0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
        0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
    ];

    #[test]
    fn salsa_20_8_core_test_vector() {
        use super::*;
        let s_20_input =  SalsaBlock::from_bytes(SALSA_20_INPUT_TEST_VECTOR);
        let s_20_output = SalsaBlock::from_bytes(SALSA_20_OUTPUT_TEST_VECTOR);
        assert_eq!(salsa_20_8_core(s_20_input), s_20_output);
    }

    static BLOCK_MIX_INPUT_TEST_VECTOR: [u8; 128] = [
        0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4,
        0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
        0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e,
        0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
        0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b,
        0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
        0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
        0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
        0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22,
        0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
        0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb,
        0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
        0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe,
        0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
        0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda,
        0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89,
    ];

    static BLOCK_MIX_OUTPUT_TEST_VECTOR: [u8; 128] = [
        0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99,
        0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
        0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d,
        0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
        0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc,
        0xfe, 0x6b, 0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba,
        0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
        0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
        0x20, 0xed, 0xc9, 0x75, 0x32, 0x38, 0x81, 0xa8,
        0x05, 0x40, 0xf6, 0x4c, 0x16, 0x2d, 0xcd, 0x3c,
        0x21, 0x07, 0x7c, 0xfe, 0x5f, 0x8d, 0x5f, 0xe2,
        0xb1, 0xa4, 0x16, 0x8f, 0x95, 0x36, 0x78, 0xb7,
        0x7d, 0x3b, 0x3d, 0x80, 0x3b, 0x60, 0xe4, 0xab,
        0x92, 0x09, 0x96, 0xe5, 0x9b, 0x4d, 0x53, 0xb6,
        0x5d, 0x2a, 0x22, 0x58, 0x77, 0xd5, 0xed, 0xf5,
        0x84, 0x2c, 0xb9, 0xf1, 0x4e, 0xef, 0xe4, 0x25,
    ];

    #[test]
    fn block_mix_test_vector() {
        use super::*;
        let b = BLOCK_MIX_INPUT_TEST_VECTOR[..].to_owned();
        let z = BLOCK_MIX_OUTPUT_TEST_VECTOR[..].to_owned();


        assert_eq!(scrypt_block_mix(&b), z);
    }

    static SCRYPT_ROMIX_INPUT_TEST_VECTOR: [u8; 128] = [
        0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4,
        0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
        0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e,
        0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
        0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b,
        0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
        0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
        0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
        0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22,
        0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
        0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb,
        0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
        0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe,
        0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
        0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda,
        0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89,
    ];

    static SCRIPT_ROMIX_OUTPUT_TEST_VECTOR: [u8; 128] = [
        0x79, 0xcc, 0xc1, 0x93, 0x62, 0x9d, 0xeb, 0xca,
        0x04, 0x7f, 0x0b, 0x70, 0x60, 0x4b, 0xf6, 0xb6,
        0x2c, 0xe3, 0xdd, 0x4a, 0x96, 0x26, 0xe3, 0x55,
        0xfa, 0xfc, 0x61, 0x98, 0xe6, 0xea, 0x2b, 0x46,
        0xd5, 0x84, 0x13, 0x67, 0x3b, 0x99, 0xb0, 0x29,
        0xd6, 0x65, 0xc3, 0x57, 0x60, 0x1f, 0xb4, 0x26,
        0xa0, 0xb2, 0xf4, 0xbb, 0xa2, 0x00, 0xee, 0x9f,
        0x0a, 0x43, 0xd1, 0x9b, 0x57, 0x1a, 0x9c, 0x71,
        0xef, 0x11, 0x42, 0xe6, 0x5d, 0x5a, 0x26, 0x6f,
        0xdd, 0xca, 0x83, 0x2c, 0xe5, 0x9f, 0xaa, 0x7c,
        0xac, 0x0b, 0x9c, 0xf1, 0xbe, 0x2b, 0xff, 0xca,
        0x30, 0x0d, 0x01, 0xee, 0x38, 0x76, 0x19, 0xc4,
        0xae, 0x12, 0xfd, 0x44, 0x38, 0xf2, 0x03, 0xa0,
        0xe4, 0xe1, 0xc4, 0x7e, 0xc3, 0x14, 0x86, 0x1f,
        0x4e, 0x90, 0x87, 0xcb, 0x33, 0x39, 0x6a, 0x68,
        0x73, 0xe8, 0xf9, 0xd2, 0x53, 0x9a, 0x4b, 0x8e,
    ];


    #[test]
    fn scrypt_romix_test_vector() {
        use super::*;
        let input = SCRYPT_ROMIX_INPUT_TEST_VECTOR[..].to_owned();
        let output = SCRIPT_ROMIX_OUTPUT_TEST_VECTOR[..].to_owned();
        assert_eq!(scrypt_romix(&input, 16), output);
    }

    static SCRYPT_TEST_VECTOR_0: [u8; 64] = [
    0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20,
    0x3b, 0x19, 0xca, 0x42, 0xc1, 0x8a, 0x04, 0x97,
    0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8,
    0xdf, 0xdf, 0xfa, 0x3f, 0xed, 0xe2, 0x14, 0x42,
    0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48, 0xf8,
    0x32, 0x6a, 0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17,
    0xe8, 0xd3, 0xe0, 0xfb, 0x2e, 0x0d, 0x36, 0x28,
    0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06,
    ];

    static SCRYPT_TEST_VECTOR_1: [u8; 64] = [
    0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00,
    0x78, 0x56, 0xe7, 0x19, 0x0d, 0x01, 0xe9, 0xfe,
    0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30,
    0xe7, 0x73, 0x76, 0x63, 0x4b, 0x37, 0x31, 0x62,
    0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88,
    0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,
    0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d,
    0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40,
    ];

    static SCRYPT_TEST_VECTOR_2: [u8; 64] = [
    0x70, 0x23, 0xbd, 0xcb, 0x3a, 0xfd, 0x73, 0x48,
    0x46, 0x1c, 0x06, 0xcd, 0x81, 0xfd, 0x38, 0xeb,
    0xfd, 0xa8, 0xfb, 0xba, 0x90, 0x4f, 0x8e, 0x3e,
    0xa9, 0xb5, 0x43, 0xf6, 0x54, 0x5d, 0xa1, 0xf2,
    0xd5, 0x43, 0x29, 0x55, 0x61, 0x3f, 0x0f, 0xcf,
    0x62, 0xd4, 0x97, 0x05, 0x24, 0x2a, 0x9a, 0xf9,
    0xe6, 0x1e, 0x85, 0xdc, 0x0d, 0x65, 0x1e, 0x40,
    0xdf, 0xcf, 0x01, 0x7b, 0x45, 0x57, 0x58, 0x87,
    ];

    static SCRYPT_TEST_VECTOR_3: [u8; 64] = [
    0x21, 0x01, 0xcb, 0x9b, 0x6a, 0x51, 0x1a, 0xae,
    0xad, 0xdb, 0xbe, 0x09, 0xcf, 0x70, 0xf8, 0x81,
    0xec, 0x56, 0x8d, 0x57, 0x4a, 0x2f, 0xfd, 0x4d,
    0xab, 0xe5, 0xee, 0x98, 0x20, 0xad, 0xaa, 0x47,
    0x8e, 0x56, 0xfd, 0x8f, 0x4b, 0xa5, 0xd0, 0x9f,
    0xfa, 0x1c, 0x6d, 0x92, 0x7c, 0x40, 0xf4, 0xc3,
    0x37, 0x30, 0x40, 0x49, 0xe8, 0xa9, 0x52, 0xfb,
    0xcb, 0xf4, 0x5c, 0x6f, 0xa7, 0x7a, 0x41, 0xa4,
    ];

    #[test]
    fn scrypt_test_vector_0() {
        use super::*;
        assert_eq!(scrypt("", "", 16, 1, 1, 64), SCRYPT_TEST_VECTOR_0[..].to_owned());
    }

    #[test]
    fn scrypt_test_vector_1() {
        use super::*;
        assert_eq!(scrypt("password", "NaCl", 1024, 8, 16, 64), SCRYPT_TEST_VECTOR_1[..].to_owned());
    }

    #[test]
    fn scrypt_test_vector_2() {
        use super::*;
        assert_eq!(scrypt("pleaseletmein", "SodiumChloride", 16384, 8, 1, 64), SCRYPT_TEST_VECTOR_2[..].to_owned());
    }
    #[test]
    fn scrypt_test_vector_3() {
        use super::*;
        assert_eq!(scrypt("pleaseletmein", "SodiumChloride", 1048576, 8, 1, 64), SCRYPT_TEST_VECTOR_3[..].to_owned());
    }
 }
